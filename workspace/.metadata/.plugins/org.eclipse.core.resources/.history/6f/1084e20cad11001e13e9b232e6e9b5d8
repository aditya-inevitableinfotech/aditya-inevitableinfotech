package ORCA;

import static org.testng.Assert.fail;

import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.time.Duration;
import java.util.NoSuchElementException;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

import org.aspectj.lang.annotation.After;
import org.aspectj.lang.annotation.Before;
import org.openqa.selenium.By;
import org.openqa.selenium.firefox.FirefoxBinary;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import io.appium.java_client.AppiumDriver;
import io.appium.java_client.MobileElement;
import io.appium.java_client.TouchAction;
import io.appium.java_client.android.Activity;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.android.StartsActivity;
import io.appium.java_client.android.nativekey.AndroidKey;
import io.appium.java_client.android.nativekey.KeyEvent;
import io.appium.java_client.remote.AndroidMobileCapabilityType;
import io.appium.java_client.remote.MobileCapabilityType;
import io.appium.java_client.touch.WaitOptions;
import io.appium.java_client.touch.offset.PointOption;


	public class ORCA_I2CAppTest {
		
		
	FirefoxDriver driver;
		
		@BeforeMethod
		public void setup() {
			
			try {
				
			DesiredCapabilities dc = new DesiredCapabilities();
			
			dc.setCapability(MobileCapabilityType.AUTOMATION_NAME,"APPIUM");
			dc.setCapability("appium-version", "1.22.3");
			dc.setCapability(MobileCapabilityType.DEVICE_NAME,"sb52");
			dc.setCapability(MobileCapabilityType.PLATFORM_NAME,"Android");
			dc.setCapability(MobileCapabilityType.PLATFORM_VERSION,"12");
			dc.setCapability(MobileCapabilityType.UDID, "0123456789ABCDEF");	
			dc.setCapability(MobileCapabilityType.AUTOMATION_NAME,"UiAutomator2");
			dc.setCapability(MobileCapabilityType.NO_RESET, "true");
			dc.setCapability(MobileCapabilityType.FULL_RESET, "false");
			dc.setCapability("uiautomator2ServerInstallTimeout", 9000); 
			dc.setCapability("uiautomator2ServerLaunchTimeout", 9000);
			dc.setCapability(MobileCapabilityType.NEW_COMMAND_TIMEOUT,2000);
		    dc.setCapability("automationName", "uiautomator2");
			dc.setCapability("skipServerInstallation", false);
			dc.setCapability("adbExecTimeout", 5000);
			dc.setCapability("clearSystemFiles", true);
			dc.setCapability("appWaitForLaunch", false);
			dc.setCapability("suppressKillServer", true);
			dc.setCapability("autoGrantPermissions", "true");
			dc.setCapability("appWaitPackage", "io.appium.settings");
			dc.setCapability("appWaitActivity", "io.appium.settings.Settings");
			
			
			dc.setCapability(AndroidMobileCapabilityType.AUTO_GRANT_PERMISSIONS, true);
		    dc.setCapability(MobileCapabilityType.CLEAR_SYSTEM_FILES, true);
			URL url = new URL("http://127.0.0.1:4723/wd/hub");
			driver = new AndroidDriver<MobileElement>(url, dc);
			driver.manage().timeouts().implicitlyWait(300, TimeUnit.SECONDS);
			
			}
			catch (Exception exp) 
			{
				System.out.println("Cause is : "+exp.getCause());
				System.out.println("Message is : "+exp.getMessage());
				exp.printStackTrace();
			}
		}
		
		
		@SuppressWarnings({ "rawtypes", "resource" })
		@Test(invocationCount = 1)
		public void ORCA_I2CAppTesting() throws InterruptedException, IOException
		
		{
			System.out.println("ORCA_I2CAppTesting is Started...");
			
			/*((AndroidDriver<MobileElement>)driver).lockDevice();
			((AndroidDriver<MobileElement>)driver).unlockDevice();
			TouchAction  action = new TouchAction(driver);	
			org.openqa.selenium.Dimension size	=driver.manage().window().getSize();
			int width=size.width;
			int height=size.height;
			int middleOfX=width/2;
			int startYCoordinate= (int)(height*.80);
			int endYCoordinate= (int)(height*.20);			
			action.press(PointOption.point(middleOfX, startYCoordinate))
			.waitAction(WaitOptions.waitOptions(Duration.ofSeconds(2)))
			.moveTo(PointOption.point(middleOfX, endYCoordinate)).release().perform();
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);Thread.sleep(2000);
			driver.findElement(By.id("com.android.systemui:id/pinEntry")).click();
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);Thread.sleep(2000);
			driver.findElement(By.id("com.android.systemui:id/key2")).click();
			driver.findElement(By.id("com.android.systemui:id/key0")).click();
			driver.findElement(By.id("com.android.systemui:id/key2")).click();
			driver.findElement(By.id("com.android.systemui:id/key2")).click();
			driver.findElement(By.id("com.android.systemui:id/key_enter")).click();
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);Thread.sleep(2000);
			((StartsActivity) driver).startActivity(new Activity("com.inevitable.controller", ".MainActivity"));
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);Thread.sleep(2000);
			driver.findElement(By.xpath("//android.widget.Button[@text='I2C']")).click();
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);Thread.sleep(2000);
			System.out.print("Enter a Input: ");
			Scanner sc= new Scanner(System.in);
			String UserInput = sc.nextLine();
			driver.findElement(By.id("com.inevitable.controller:id/input_string")).sendKeys(UserInput);
			System.out.print("You have entered: "+UserInput);
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);Thread.sleep(2000);
			driver.findElement(By.xpath("//android.widget.Button[@text='SUBMIT']")).click();
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);Thread.sleep(2000);
			((AndroidDriver) driver).pressKey(new KeyEvent(AndroidKey.BACK));
			driver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS);Thread.sleep(2000);
			((AndroidDriver) driver).pressKey(new KeyEvent(AndroidKey.BACK));
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);Thread.sleep(2000);
			driver.findElement(By.xpath("//android.widget.Button[@text='YES']")).click();
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);Thread.sleep(2000);
			((AndroidDriver<MobileElement>)driver).lockDevice();
			
			System.out.println("--------> ORCA_I2CApp_Test Executed Successfully on ORCA Board <--------");
			Runtime.getRuntime().exec("clear");
			ClearConsole();*/
			
			private FirefoxBinary binary = new FirefoxBinary(new
			File("C:/Squash-TA/Firefox12/firefox.exe"));
			private FirefoxProfile profile = new FirefoxProfile();
	//		private WebDriver driver1;
			private String baseUrl;
			private boolean acceptNextAlert = true;
			private StringBuffer verificationErrors = new StringBuffer();
			@Before(value = "")
			public void setUp() throws Exception {
			driver = new FirefoxDriver();
			baseUrl = "http://localhost:8080/";
			driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS); }
			@Test
			public void testPetStoreSelenium() throws Exception {
			driver.get(baseUrl);
			driver.findElement(By.linkText("Enter the Store")).click();
			driver.findElement(By.xpath("//tr[5]/td/a/img")).click();
			driver.findElement(By.xpath("//tr[3]/td/b/a/font")).click();

			driver.findElement(By.xpath("//tr[3]/td[5]/a/img")).click();
			driver.findElement(By.xpath("//td[2]/center/a/img")).click();
			driver.findElement(By.xpath("//center[2]/a/img")).click();
			driver.findElement(By.name("username")).clear();
			driver.findElement(By.name("username")).sendKeys("j2ee");
			driver.findElement(By.name("password")).clear();
			driver.findElement(By.name("password")).sendKeys("j2ee");
			driver.findElement(By.name("update")).click();
			driver.findElement(By.cssSelector("p > input[type=\"image\"]")).click();
			driver.findElement(By.xpath("//center[3]/a/img")).click(); }
			@After(value = "")
			public void tearDown() throws Exception {
			driver.quit();
			String verificationErrorString = verificationErrors.toString();
			if (!"".equals(verificationErrorString)) {
			fail(verificationErrorString); }
			}
			private boolean isElementPresent(By by) {
			try {
			driver.findElement(by);
			return true; }
			catch (NoSuchElementException e) {
			return false; }
			}
		}
    }

		
		    public void ClearConsole() {
		        try {
		             System.getProperty("os.name").contains("Linux"); 
		             {
		                Process process = Runtime.getRuntime().exec("clear");
		                process.waitFor();
		            } 
		        } catch (IOException | InterruptedException e) 
		        {
		            e.printStackTrace();
		        }
		    }

		
		//@AfterMethod
		public void Teardown() {
			if (driver != null) {
	            driver.quit();
	        }
		}

	}

